# 1) Build a Docker image from the latest commit to the main branch in the repository and tag it with 'latest' or the version specified
# 2) Push the Docker image to DockerHub repository by the same name as the GitHub repository

name: Build Image and Push to DockerHub

on:
  # Manual Trigger
  workflow_dispatch:
    inputs:
      version:
        description: Version (Must Match Git Tag. Leave blank for latest)
        required: false
        type: string

  # When a commit is pushed to 'main', always build and push the latest to DockerHub (tagged as 'Latest')
  # When a tag is pushed to 'main', build and push the commit with that tag to DockerHub (tagged in DockerHub with that version)
  push:
    branches: [ "main" ]

  # When a Release is published, build and push the commit with that tag to DockerHub (tagged in DockerHub with that version)
  release:
    types: [published,edited]


jobs:

  build-push:

    runs-on: ubuntu-latest

    steps:
      # If event type is 'workflow_dispatch' and 'Version' is specified, this step will 
      # set the value of GIT_TAG and DOCKER_TAG to the specified version number
      - name: Set GIT_TAG and DOCKER_TAG to specified version
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.version != '' }}
        run: |
          echo "GIT_TAG=${{ inputs.version }}" >> $GITHUB_ENV
          echo "DOCKER_TAG=${{ inputs.version }}" >> $GITHUB_ENV

      # If event type is 'workflow_dispatch' and 'Version' is NOT specified OR the event type is 'push', this step will 
      # set the value of GIT_TAG to blank DOCKER_TAG to 'Latest'
      - name: Set GIT_TAG to blank and DOCKER_TAG to 'Latest'
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.version == '') || github.event_name == 'push' }}
        run: |
          echo "GIT_TAG=" "" >> $GITHUB_ENV
          echo "DOCKER_TAG=Latest" >> $GITHUB_ENV

      # If event type is 'release', this step will 
      # set the value of GIT_TAG and DOCKER_TAG to the git tag of the release
      - name: Set GIT_TAG and DOCKER_TAG to Git Tag from release
        if: ${{ github.event_name == 'release' }}
        run: |
          echo "GIT_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "DOCKER_TAG=${{ github.ref_name }}" >> $GITHUB_ENV

      # This action will check out the code that has been tagged with the specified version, 
      # or it will  check out the latest commit if version was not specified
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_TAG }}
      
      # Log into DockerHub account
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      # QEMU is used by the docker/build-push-action action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      # Buildx is used by the docker/build-push-action action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # If 'Version' was specified, this action will build the docker image from the commit that's tagged with the specified version
      # and push the image to DockerHug with the specified version as the tag
      - name: Build and Push Specific Version
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ env.DOCKER_TAG }}
